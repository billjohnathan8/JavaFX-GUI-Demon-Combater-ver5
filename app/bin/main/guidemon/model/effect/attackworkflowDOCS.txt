0) Grey out / do not display any abilities that are isOn = false i.e, OFF OR Rostered but not activated, etc. UNLESS they are only temporarily deactivated. 

1) Casting
    1.0.  Press Button
    1.1.  Check Resource Costs - Bar from Cast if insufficient
    1.2.  Check Activation Conditions - Bar from cast if conditions are not met. 
    1.3.  Overlay Translucent Shape for AOE (if applicable) OR overlay translucent casting circle centered on caster (shape based on actor's base casting range shape)
    1.4.  Highlight valid targets within AOE or Casting Range (include friendly fire, etc. based on Casting Parameters)
    1.5.  Select Targets from Valid Targets.
    1.6.  Change Highlight Colour for Confirmed Targets.
    1.7.  Query for Confirmation on Target Selection. 
    1.8.  Find and Consume (Deduce and Reduce) all Relevant ResourceCosts 
    1.9.  (Optional: Consume ResourceCosts via Maintanenace Cost or Cancel the Casting Workflow Early)
    1.10. (Optional: Complete Casting Workflow (Ritual, Waiting on Cast Time, etc.)) 
    1.11. Tick Forward GameTime in accordance to Casting Workflow's Cast Time 

2) Attacking (Optional, Usually for Damaging Abilities, Debuffs, etc.)
    2.1. Roll all AttackRolls / HitChecks for the casted ability (based on number of hits for the attack), factoring all bonuses into the final roll value's calculation. 
        2.1.0. Apply all relevant bonuses: 
            -Bonuses from Effects / Abilities 
            -HitCheckModifier / AttackModifier (ATKmod)
            -Situational Bonus
        2.1.1. Check for Critical Hits (hit check hits the highest value on its dice.) - Critical Hits will apply more damage or additional effects. 
        2.1.2. (Optional:If there is a Critical Hit, Prompt the Caster. They can reroll that entire hit. If it hits a critical again (inclusive of all the bonus damage (higher damage calculation formula), addional effects from a normal critical hit.), they will cause True Critical Hit Damage (which causes portion of that critical damage to be dealt as True Damage via additive Bonus Damage as well))
        2.1.3. Broadcast an AttackRollEvent, before any reactions, so that the SceneContext's EventBus can alert all subscribed Triggers (namely AttackTrigger) to poll/query for reactions. (Optional: broadcast a TrueCriticalHitEvent)

    2.2. Poll for Reactions from all targets. 
        Using AttackRollEvent and AttackTrigger: 
            2.2.1. Extract all targets from the AttackRollEvent, iterating through each of them. 
            2.2.2. Find all Abilities that are: ON and have the tag: "Reaction"
            2.2.3. Of these abilities, filter out those that have: (1) Insufficient CastingCost, (2) Invalid ActivationCondition
            2.2.4. Return a filtered list of all the valid reactions that this particular target can take to react against the incoming attack. (Optional: if there are no reactions, there is no timer and the hit contest between the caster and this target automatically fails)
            2.2.5. Start a timer (timer lasts longer based on how much DEX the character has or by some otherwise specified metric). 
            2.2.6. Poll/Query for User Input for this target. 
            2.2.7. Resolve Reaction Details I.e, number of dodges, resource costs, parry damage, counter attack damage rolling, etc. (Optional: if there is no received response, the hit contest between the caster and this target automatically fails).

    2.3. Resolve Hits via Hit Contest 
        Based on the polling:
            2.3.1. Using Reaction Data to compute final successful hits: e.g. List<Integer> dodgeChecks vs List<Integer> attackRolls. Sort both lists, compare highest-to-highest first. 
                   If there are more reactions / dodges, waste any remaining smaller dodges. 
                   If there are more attack rolls - then these will definitely succeed and apply the effect / damage. 

            2.3.2. Broadcast relevant events accordingly. E.g. SuccessfulHitEvent, MissedHitEvent, DamageReducedEvent, etc.

3) Effect Application
    3.1. Apply all effects from the ability and their corresponding subeffects in order (if applicable) via AbilityProcessor and each individual Effect.class.  
    3.2. Repeat effect application based on the number of successful hits, broadcasted via SuccessfulHitEvent
    3.3. Broadcast the summary, for use in statistics etc. i.e, AttackResolvedEvent, CastResolvedEvent etc. <- this marks the end of the entire casting process. 

    Optional: DamageEffect <- for any damage effect, the changes it enacts are handled internally by the actor itself, but before that happens, other additional damageeffects and factors may affect it before reaching the actor. 
        0.0.  Resolve any EffectReactions before any damage is dealt (e.g. Poison StatusEffect + Fire Damage = Bonus Explosion Damage on that target auto-casted). 
        0.1.  Extract final damage value after DamageReduction from DamageReducedEvent etc.
        0.2.  Extract armour penetration value (default: 0 if never specified)
        0.3.  Extract all DamageTypes for the incoming damage calculations
        0.4.  Extract all DamageTags for special behaviour of damage etc.
        0.5.  Handle Armour Penetration and Layer-Specific Damage 
        0.6.  Remainder Damage that does not penetrate armour goes through the HealthLayers
        0.7.  Reduce damage by TrueAC (tAC)
        0.8.  Deal Damage to Shield layers (handle damage reduction from effects per layer -> handle damage immunities and banes per layer -> resolve damage multipliers and rank differences per layer). Resolve ImpedingRank if applicable.
        0.9.  Deal Damage to Armour Layers (handle damage reduction from effects per layer -> handle damage immunities and banes per layer -> resolve damage multipliers and rank differences per layer). Resolve ImpedingRank if applicable.
        0.10. Deal Damage to Other Health Layers e.g. oHEAL, AbsorptionHP, etc. (handle damage reduction from effects per layer -> handle damage immunities and banes per layer -> resolve damage multipliers and rank differences per layer). Resolve ImpedingRank if applicable.
        0.11. Deal Damage to the Main Health Layer (e.g. HP or AC_HP, etc.) (handle damage reduction from effects per layer -> handle damage immunities and banes per layer -> resolve damage multipliers and rank differences per layer)
        0.12. If at 0HP for Main Health Layer - apply Unconscious Status Effect. Perform Death Saves every round. 
        0.13. If at HP == DeathHP for Main Health Layer -> apply Dead Status Effect. (Optional: Cause Interruption for Finale Action.) 